#+AUTHOR: Sven Mkw
#+TITLE: Chapter Architecture Outline
#+OPTIONS: toc:3 h:3

# Each headline (*) represents a section in the chapter.
# Each listing entry (-) represents a paragraph in the section.

* Architecture

  - [X] Chapter overview
  - [X] Motivation Framework: Convertify (build applications like
                                               Brickify/ Laser Origami)
  - [X] Motivation Application: Platener

** Computer Graphics in Web-Environments

   - [X] Section overview
   - [X] before diving in, we have to understand the concepts
     - in general
     - in web-environment

*** Render-loop and Scene Management

    - subsection overview
    - needs-figure :: How graphics work (Render- & update loops)
    - needs-figure :: Organize visuals in hierarchical structures (scene graph)
    - WebGL for web-environments (similarities/ differences to
      conventional graphics)
    - threejs to simplify working with WebGL
    - subsection summary

*** 3D-Model Representation

    - subsection overview
    - 3D-data representation in vertices, faces, two-manifold meshes
    - stl file format (most simple, but community has it)
    - meshlib library to stream-read stl files
    - convert face-vertex-mesh to threejs geometries
    - subsection summary

** The Framework: Convertify

   - Section overview
   - inspired by iOS, build applications of same kind easily

*** The Framework is Based on Brickify

    - Subsection overview
    - Recap: What is Brickify?
    - Motivation: Reuse ideas of Brickify to bootstrap the framework
      with previous work

    - Goals of Brickify (3dobject conversions, aimed to be a
      framework in the beginning)

    - needs-figure :: Scene (flat graph, annotation with threejs objects)
    - Renderer (bring threejs objects to WebGL scene)
    - Plugins (decomposed computation/ feature units)
    - needs-figure :: PluginHooks (communication via events)
    - Bundle (control the application from outside)

    - Framework characteristics of Brickify (though logic and ui not
      decomposed, that is why we had to make changes, subsection summary)

*** The Framework Reuses Ideas and Components of Brickify

    - Section overview: The framework can provide features out of the
      box, by taking components from Brickify (Render-loop, Scene
      Management, Plugin loading)
    - needs-cross-ref :: Render-loop is =Renderer class=, reused component
    - needs-cross-ref :: Scene Management is =Node class structure=
         and =SceneManager class=, reused component
    - needs-cross-ref :: Plugins, but we greatly enhance this, see
         next chapter, reused idea

*** The Framework Provides an Enhanced Plugin System

    - Plugin definition in Convertify
    - *full fledged applications will implement a set of plugins to
      provide functionality and web-ui code to provide interface*
    - needs-ref :: Lifecycle events in Convertify (= PluginHooks of Brickify)
    - needs-figure :: Example Plugin, interacting via PluginHooks
    - System dispatches events (where do events come from?)
    - needs-ref :: mediator organizes communication
    - needs-figure :: mediator between dispatched system events and plugins
    - *full fledged applications will implement a mediator to organize
      feature communication*


** The Application Is Implemented with the Framework: Platener

# built with convertify
# more specify pipeline stuff here
#
# divided into packages
